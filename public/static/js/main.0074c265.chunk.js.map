{"version":3,"sources":["components/SearchCategory.js","components/Tweets/TweetItem/TweetItem.js","components/Tweets/TweetList/TweetList.js","containers/TwitterWrapper.js","App.js","serviceWorker.js","index.js"],"names":["SearchCategory","props","inputRef","useRef","className","type","ref","name","placeholder","onClick","event","onchange","TweetItem","url","alt","src","style","float","fromNow","date","text","getItemStyle","isDragging","draggableStyle","userSelect","padding","grid","margin","borderRadius","background","TweetList","useState","retrievedTweets","setRetrievedTweets","savedTweets","setsavedTweets","enteredFilter","setEnteredFilter","useEffect","query","length","axios","get","process","params","searchQuery","count","then","response","responseItems","data","statuses","localSavedData","JSON","parse","localStorage","getItem","filterTweets","setItem","stringify","retrived","saved","itemsClone","forEach","item","select","id","splice","index","selected","getList","current","value","onDragEnd","result","source","destination","droppableId","result1","droppableSource","droppableDestination","sourceClone","destClone","removed","move","provided","snapshot","innerRef","isDraggingOver","map","key","draggableId","toString","draggableProps","dragHandleProps","user","created_at","profile_background_image_url_https","isDragDisabled","TwitterWrapper","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0074c265.chunk.js","sourcesContent":["import React ,{ useRef }from \"react\";\r\nimport './SearchCategory.css'\r\n\r\nconst SearchCategory = (props) => {\r\n  const inputRef = useRef();\r\n  return (\r\n    <div>\r\n      <div className=\"ui fluid search\">\r\n        <div className=\"ui icon input\">\r\n          <input className=\"prompt\" type=\"text\" ref= {inputRef} name=\"filterValue\" \r\n          placeholder=\"Search Tweet...\" />\r\n          <span className=\"pointer\" onClick={event => props.onchange(inputRef)}><i className=\"search icon\"></i></span>  \r\n        </div>\r\n        <div className=\"results\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchCategory;\r\n","import React from \"react\";\r\nimport Moment from 'react-moment';\r\nconst TweetItem = (props) => {\r\n  const url = props.url ? props.url: \"https://picsum.photos/200\";\r\n  return (\r\n    <div className=\"content\">\r\n      <img\r\n        className=\"ui avatar image\"\r\n        alt=\"img\"\r\n        src={url}\r\n      />\r\n      <span> {props.name} </span>  <span style={{ float: \"right\" }}> <Moment fromNow>{props.date}</Moment>  </span>\r\n      <div className=\"description\">\r\n        {props.text}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TweetItem;\r\n","// library imports\r\nimport React, {useState, useEffect } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport axios from \"axios\";\r\n// Component  imports\r\nimport SearchCategory from \"../../SearchCategory\";\r\nimport TweetItem from \"../TweetItem/TweetItem\";\r\n// css imports\r\nimport './TweetList.css'\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n    if (source == null)\r\n        source = [];\r\n    if (destination == null)\r\n        destination = [];\r\n    const sourceClone = [...source];\r\n    const destClone = [...destination];\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};\r\n\r\nconst grid = 8;\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n    borderRadius: '5px',\r\n\r\n    // change background colour if dragging\r\n    background: isDragging ? '#e6d7c3' : 'white',\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n    background: isDraggingOver ? '#e6d7c3' : '#e6d7c3',\r\n    padding: grid,\r\n    borderRadius: '5px',\r\n});\r\n\r\nconst TweetList = () => {\r\n    const [retrievedTweets, setRetrievedTweets] = useState([]);\r\n    const [savedTweets, setsavedTweets] = useState([]);\r\n    const [enteredFilter, setEnteredFilter] = useState('React');\r\n\r\n    /**\r\n     * fetch the search results for passed filter value\r\n     */\r\n    useEffect(() => {\r\n        const query = enteredFilter.length === 0 ? 'React' : enteredFilter;\r\n        axios.get(process.env.REACT_APP_BACKEND_URL, {\r\n            params: {\r\n                searchQuery: query,\r\n                count: 6\r\n            },\r\n        }).then((response) => {\r\n            const responseItems = response.data.statuses;\r\n            const localSavedData = JSON.parse(localStorage.getItem('selected'))\r\n            filterTweets(responseItems, localSavedData)\r\n        });\r\n    }, [enteredFilter]);\r\n\r\n    /**\r\n     * Update local storage whenever saved tweets are updated\r\n     */\r\n    useEffect(() => {\r\n        if (savedTweets && savedTweets.length > 0)\r\n            localStorage.setItem('selected', JSON.stringify(savedTweets))\r\n    }\r\n        , [savedTweets]);\r\n\r\n    /**\r\n     * Remove saved tweets from the retreived list to avoid duplication and update saved tweets on initial load\r\n     */\r\n    const filterTweets = (retrived, saved) => {\r\n        const itemsClone = [...retrived];\r\n        if (retrived && retrived.length > 0 && saved && saved.length > 0) {\r\n            retrived.forEach(item => {\r\n                saved.forEach(select => {\r\n                    if (item.id === select.id) {\r\n                        itemsClone.splice(item.index, 1);\r\n                    }\r\n                })\r\n            });\r\n        }\r\n        setRetrievedTweets(itemsClone);\r\n        const selected = JSON.parse(localStorage.getItem('selected'));\r\n        setsavedTweets(selected);\r\n    }\r\n    /**\r\n     *  on Search Click\r\n     */\r\n    const changeHandler = (event) => {\r\n        setEnteredFilter(event.current.value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Obtain the set of tweets based on the passed id\r\n     */\r\n    const getList = (id) => {\r\n        if (id === 'retrived') {\r\n            return retrievedTweets;\r\n        } else {\r\n            return savedTweets;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Function triggered when a tweet is dragged and saved\r\n     */\r\n    const onDragEnd = result => {\r\n        const { source, destination } = result;\r\n        // dropped outside the list or same list\r\n        if (!destination || destination.droppableId !== 'saved') {\r\n            return;\r\n        }\r\n        destination.droppableId = 'saved';\r\n        const result1 = move(\r\n            getList(source.droppableId),\r\n            getList(destination.droppableId),\r\n            source,\r\n            destination\r\n        );\r\n        setRetrievedTweets(result1.retrived);\r\n        setsavedTweets(result1.saved);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <SearchCategory className=\"search\"\r\n                onchange={changeHandler} />\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <div className=\"container\">\r\n                    <Droppable className=\"tweet\" droppableId=\"retrived\">\r\n                        {(provided, snapshot) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                style={getListStyle(snapshot.isDraggingOver)}>\r\n                                {retrievedTweets.map((item, index) => (\r\n                                    <Draggable\r\n                                        key={item.id}\r\n                                        draggableId={(item.id).toString()}\r\n                                        index={index}>\r\n                                        {(provided, snapshot) => (\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                                style={getItemStyle(\r\n                                                    snapshot.isDragging,\r\n                                                    provided.draggableProps.style\r\n                                                )}>\r\n                                                <TweetItem \r\n                                                name={item.user.name}\r\n                                                text={item.text}\r\n                                                date={item.created_at}\r\n                                                url={item.user.profile_background_image_url_https} />\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                    <Droppable droppableId=\"saved\">\r\n                        {(provided, snapshot) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                style={getListStyle(snapshot.isDraggingOver)}>\r\n                                {savedTweets && savedTweets.map((item, index) => (\r\n                                    <Draggable isDragDisabled\r\n                                        key={item.id}\r\n                                        draggableId={(item.id).toString()}\r\n                                        index={index}>\r\n                                        {(provided, snapshot) => (\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                                style={getItemStyle(\r\n                                                    snapshot.isDragging,\r\n                                                    provided.draggableProps.style\r\n                                                )}>\r\n                                                <TweetItem\r\n                                                    name={item.user.name}\r\n                                                    text={item.text}\r\n                                                    date={item.created_at} \r\n                                                    url={item.user.profile_background_image_url_https} />\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </div>\r\n            </DragDropContext></div>\r\n    );\r\n}\r\n\r\nexport default TweetList;\r\n\r\n","import React, { Component } from \"react\";\r\nimport TweetList from \"../components/Tweets/TweetList/TweetList\";\r\n\r\nexport default class TwitterWrapper extends Component {\r\n  render() {\r\n    return <TweetList />;\r\n  }\r\n}\r\n","import React from \"react\";\nimport TweetWrapper from \"./containers/TwitterWrapper\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"ui container \">\n        <h2 className=\"ui dividing header\"> Tweet Saver</h2>\n        <TweetWrapper />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}